doctype html
html
  head
    title Crear Nuevo Template
    link(href="https://cdn.lineicons.com/4.0/lineicons.css", rel="stylesheet")
    link(href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css", rel="stylesheet")
    link(rel="stylesheet" href="css/nuevoTemplate.css")
    link(href="https://cdn.quilljs.com/1.3.6/quill.snow.css", rel="stylesheet")
    script(src="https://cdn.quilljs.com/1.3.6/quill.min.js")
    script(src="/js/frontNuevaTemplate.js")
    script(src="https://cdn.jsdelivr.net/npm/sweetalert2@11")
    style.
      // Estilos personalizados
      .form-section
        margin-bottom: 20px
      .card-custom
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1)
        border-radius: 8px
        margin-bottom: 20px
        opacity: 0.95
        background-color: #dcdcdc
        user-select: none
        cursor: default
      .separacion-campos
        margin-bottom: 1.5rem
      .centrar-boton
        display: flex
        justify-content: center
        margin-top: 15px
      .campo-obligatorio
        border: 2px solid red !important
        background-color: #f8d7da
      .campo-obligatorio:focus
        border-color: #f5c6cb
        background-color: #f8d7da
      .error-message
        color: red
        font-size: 0.9em
        margin-top: 5px

  body
    .container-fluid(style="background-image: url('images/background_modulos.png'); background-size: cover; background-attachment: fixed; min-height: 100vh;")
      .row.justify-content-center
        .col-md-2(style="width: 200px;")
          include sidebar.pug

        .col-md-9
          .bg-light.p-4.rounded(style="margin-bottom: 20px; margin: 15px; opacity: 0.85;")
            .d-flex.align-items-center
              h3 Nuevo Template

            // Formulario Nueva Template
            .col-md-12.mt-5
              form(id="formulario", action="/submit", method="POST")
                .form-section
                  .card.card-custom
                    .card-body
                      h4.text-center Template
                      .mb-3.separacion-campos
                        label(for='nombre_template', class="form-label") Nombre del Template:
                        input#nombre_template.form-control(type='text', name='nombre_template', required)

                      .mb-3.separacion-campos
                        label(for='descripcion_template', class="form-label") Descripción del Template:
                        textarea#descripcion_template.form-control(name='descripcion_template', rows='4', required)

                // Botón Guardar
                .centrar-boton
                  button#guardarBoton(type="submit", class="btn btn-primary") Guardar

    script.
      document.addEventListener('DOMContentLoaded', function () {

        const guardarTemplate = async (nombre, descripcion) => {
            console.log('Método front');
            try {
                // Enviar los datos como JSON al servidor
                const response = await fetch('/crearTemplate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        nombre_template: nombre,
                        descripcion_template: descripcion
                    }),
                });

                if (response.ok) {
                    // Mostrar mensaje de éxito con SweetAlert
                    Swal.fire({
                        title: '¡Éxito!',
                        text: 'El template se ha guardado correctamente.',
                        icon: 'success',
                        confirmButtonText: 'Aceptar'
                    }).then(() => {
                        // Redirigir a la página principal después de la confirmación
                        window.location.href = '/getMain';
                    });
                } else {
                    console.error('Error en la respuesta:', response.statusText);
                    Swal.fire({
                        title: 'Error',
                        text: 'Hubo un problema al guardar el template. Inténtalo nuevamente.',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                }
            } catch (error) {
                console.error('Error en la búsqueda:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Hubo un problema al guardar el template. Inténtalo nuevamente.',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
            }
        }

        document.getElementById('guardarBoton').addEventListener('click', function (event) {
            event.preventDefault(); // Evita que el formulario se envíe automáticamente

            const nombreTemplate = document.getElementById('nombre_template').value;
            const descripcionTemplate = document.getElementById('descripcion_template').value;

            // Validar que los campos no estén vacíos
            if (!nombreTemplate.trim()) {
                Swal.fire({
                    title: 'Error',
                    text: 'Por favor, ingresa el nombre del template.',
                    icon: 'warning',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            if (!descripcionTemplate.trim()) {
                Swal.fire({
                    title: 'Error',
                    text: 'Por favor, ingresa una descripción del template.',
                    icon: 'warning',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            // Preguntar al usuario si está seguro de guardar el template
            Swal.fire({
                title: '¿Estás seguro?',
                text: 'Se guardarán los cambios realizados en el template.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, guardar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Llamar a la función guardarTemplate con los datos del formulario
                    console.log(nombreTemplate, descripcionTemplate);
                    guardarTemplate(nombreTemplate, descripcionTemplate);
                }
            });
        });
      });
